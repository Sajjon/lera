{% for model in models %}
{% if model.enable_samples %}
fun {{ model.state_name }}.Companion.samples(n: kotlin.UByte): List<{{ model.state_name }}> {
    return {{ model.samples_state_fn }}(n)
}
{% endif %}

class {{ model.model_name }}ViewModel(
    state: {{ model.state_name }} = {{ model.default_state_fn }}()
) : androidx.lifecycle.ViewModel() {

    private val listener = Listener()
    private val model = {{ model.model_name }}(state, listener)
    private val identity: Int = System.identityHashCode(model)
    private val _uiState = kotlinx.coroutines.flow.MutableStateFlow(state)
    val uiState: kotlinx.coroutines.flow.StateFlow<{{ model.state_name }}> =
        _uiState.asStateFlow()
{% for field in model.state_fields %}
    private val _{{ field.property_name }} = kotlinx.coroutines.flow.MutableStateFlow(state.{{ field.property_name }})
    val {{ field.property_name }}: kotlinx.coroutines.flow.StateFlow<{{ field.property_type }}> =
        _{{ field.property_name }}.asStateFlow()
{% endfor %}

    companion object {
        {% if model.enable_samples %}
        // Samples convenience for ViewModel
        @JvmStatic
        fun samples(n: kotlin.UByte): List<{{ model.model_name }}ViewModel> {
            return {{ model.model_name }}ViewModelState
                .samples(n)
                .map { {{ model.model_name }}ViewModel(it) }
        }
        {% endif %}
    }

    init {
        listener.addForwarder { newState ->
            applyState(newState)
        }
    }

    private fun applyState(newState: {{ model.state_name }}) {
        _uiState.value = newState
{% for field in model.state_fields %}
        _{{ field.property_name }}.value = newState.{{ field.property_name }}
{% endfor %}
    }

{% for method in model.methods %}
    {{ method }}

{% endfor %}
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is {{ model.model_name }}ViewModel) return false
        return this.model === other.model
    }

    override fun hashCode(): Int = identity

    override fun toString(): String = model.toString()

    override fun onCleared() {
        super.onCleared()
        listener.clear()
    }

    private inner class Listener : {{ model.listener_name }} {
        private var forwarder: (({{ model.state_name }}) -> Unit)? = null

        fun addForwarder(forwarder: ({{ model.state_name }}) -> Unit) {
            this.forwarder = forwarder
        }

        fun clear() {
            forwarder = null
        }

        override fun onStateChange(state: {{ model.state_name }}) {
            forwarder?.invoke(state)
        }
    }
}

typealias {{ model.model_name }}ViewModelState = {{ model.state_name }}
{% endfor %}
